syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "github.com/dancodery/algorand-state-channels/asrpc";

service ASRPC {
    rpc Reset(ResetRequest) returns (ResetResponse) {}

    rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {}

    rpc OpenChannel(OpenChannelRequest) returns (OpenChannelResponse) {}

    rpc Pay(PayRequest) returns (PayResponse) {}

    rpc CooperativeCloseChannel(CooperativeCloseChannelRequest) returns (CooperativeCloseChannelResponse) {}

    rpc InitiateCloseChannel(InitiateCloseChannelRequest) returns (InitiateCloseChannelResponse) {}

    rpc FinalizeCloseChannel(FinalizeCloseChannelRequest) returns (FinalizeCloseChannelResponse) {}

    rpc TryToCheat(TryToCheatRequest) returns (TryToCheatResponse) {}
}

message StateChannelNodeAddress {
    string host = 1;
    string algo_address = 2;
}

message RuntimeRecording {
    google.protobuf.Timestamp timestamp_start = 1;
    google.protobuf.Timestamp timestamp_end = 2;
    uint64 blockchain_fee = 3;
}

message ResetRequest {}

message ResetResponse {
    RuntimeRecording runtime_recording = 1;
}

message GetInfoRequest {}

message GetInfoResponse {
    string algo_address = 1;
    uint64 algo_balance = 2;
    RuntimeRecording runtime_recording = 3;
}

message OpenChannelRequest {
    StateChannelNodeAddress partner_node = 1;
    uint64 funding_amount = 2;
    uint64 penalty_reserve = 3;
    uint64 dispute_window = 4;
}

message OpenChannelResponse {
    uint64 app_id = 1;
    RuntimeRecording runtime_recording = 2;
}

message PayRequest {
    string algo_address = 1;
    uint64 amount = 2;
}

message PayResponse {
    RuntimeRecording runtime_recording = 1;
}

message CooperativeCloseChannelRequest {
    string algo_address = 1;
}

message CooperativeCloseChannelResponse {
    RuntimeRecording runtime_recording = 1;
}

message InitiateCloseChannelRequest {
    string algo_address = 1;
}

message InitiateCloseChannelResponse {
    RuntimeRecording runtime_recording = 1;
}

message FinalizeCloseChannelRequest {
    string algo_address = 1;
}

message FinalizeCloseChannelResponse {
    RuntimeRecording runtime_recording = 1;
}

message TryToCheatRequest {
    string algo_address = 1;
}

message TryToCheatResponse {
    RuntimeRecording runtime_recording = 1;
}


