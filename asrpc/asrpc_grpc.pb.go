// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: asrpc.proto

package asrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ASRPCClient is the client API for ASRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ASRPCClient interface {
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error)
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error)
	CooperativeCloseChannel(ctx context.Context, in *CooperativeCloseChannelRequest, opts ...grpc.CallOption) (*CooperativeCloseChannelResponse, error)
	InitiateCloseChannel(ctx context.Context, in *InitiateCloseChannelRequest, opts ...grpc.CallOption) (*InitiateCloseChannelResponse, error)
	FinalizeCloseChannel(ctx context.Context, in *FinalizeCloseChannelRequest, opts ...grpc.CallOption) (*FinalizeCloseChannelResponse, error)
	TryToCheat(ctx context.Context, in *TryToCheatRequest, opts ...grpc.CallOption) (*TryToCheatResponse, error)
}

type aSRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewASRPCClient(cc grpc.ClientConnInterface) ASRPCClient {
	return &aSRPCClient{cc}
}

func (c *aSRPCClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/ASRPC/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSRPCClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/ASRPC/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSRPCClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error) {
	out := new(OpenChannelResponse)
	err := c.cc.Invoke(ctx, "/ASRPC/OpenChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSRPCClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error) {
	out := new(PayResponse)
	err := c.cc.Invoke(ctx, "/ASRPC/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSRPCClient) CooperativeCloseChannel(ctx context.Context, in *CooperativeCloseChannelRequest, opts ...grpc.CallOption) (*CooperativeCloseChannelResponse, error) {
	out := new(CooperativeCloseChannelResponse)
	err := c.cc.Invoke(ctx, "/ASRPC/CooperativeCloseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSRPCClient) InitiateCloseChannel(ctx context.Context, in *InitiateCloseChannelRequest, opts ...grpc.CallOption) (*InitiateCloseChannelResponse, error) {
	out := new(InitiateCloseChannelResponse)
	err := c.cc.Invoke(ctx, "/ASRPC/InitiateCloseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSRPCClient) FinalizeCloseChannel(ctx context.Context, in *FinalizeCloseChannelRequest, opts ...grpc.CallOption) (*FinalizeCloseChannelResponse, error) {
	out := new(FinalizeCloseChannelResponse)
	err := c.cc.Invoke(ctx, "/ASRPC/FinalizeCloseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSRPCClient) TryToCheat(ctx context.Context, in *TryToCheatRequest, opts ...grpc.CallOption) (*TryToCheatResponse, error) {
	out := new(TryToCheatResponse)
	err := c.cc.Invoke(ctx, "/ASRPC/TryToCheat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ASRPCServer is the server API for ASRPC service.
// All implementations must embed UnimplementedASRPCServer
// for forward compatibility
type ASRPCServer interface {
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelResponse, error)
	Pay(context.Context, *PayRequest) (*PayResponse, error)
	CooperativeCloseChannel(context.Context, *CooperativeCloseChannelRequest) (*CooperativeCloseChannelResponse, error)
	InitiateCloseChannel(context.Context, *InitiateCloseChannelRequest) (*InitiateCloseChannelResponse, error)
	FinalizeCloseChannel(context.Context, *FinalizeCloseChannelRequest) (*FinalizeCloseChannelResponse, error)
	TryToCheat(context.Context, *TryToCheatRequest) (*TryToCheatResponse, error)
	mustEmbedUnimplementedASRPCServer()
}

// UnimplementedASRPCServer must be embedded to have forward compatible implementations.
type UnimplementedASRPCServer struct {
}

func (UnimplementedASRPCServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedASRPCServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedASRPCServer) OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannel not implemented")
}
func (UnimplementedASRPCServer) Pay(context.Context, *PayRequest) (*PayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedASRPCServer) CooperativeCloseChannel(context.Context, *CooperativeCloseChannelRequest) (*CooperativeCloseChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperativeCloseChannel not implemented")
}
func (UnimplementedASRPCServer) InitiateCloseChannel(context.Context, *InitiateCloseChannelRequest) (*InitiateCloseChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateCloseChannel not implemented")
}
func (UnimplementedASRPCServer) FinalizeCloseChannel(context.Context, *FinalizeCloseChannelRequest) (*FinalizeCloseChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeCloseChannel not implemented")
}
func (UnimplementedASRPCServer) TryToCheat(context.Context, *TryToCheatRequest) (*TryToCheatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryToCheat not implemented")
}
func (UnimplementedASRPCServer) mustEmbedUnimplementedASRPCServer() {}

// UnsafeASRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ASRPCServer will
// result in compilation errors.
type UnsafeASRPCServer interface {
	mustEmbedUnimplementedASRPCServer()
}

func RegisterASRPCServer(s grpc.ServiceRegistrar, srv ASRPCServer) {
	s.RegisterService(&ASRPC_ServiceDesc, srv)
}

func _ASRPC_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRPCServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASRPC/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRPCServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASRPC_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRPCServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASRPC/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRPCServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASRPC_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRPCServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASRPC/OpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRPCServer).OpenChannel(ctx, req.(*OpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASRPC_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRPCServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASRPC/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRPCServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASRPC_CooperativeCloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CooperativeCloseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRPCServer).CooperativeCloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASRPC/CooperativeCloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRPCServer).CooperativeCloseChannel(ctx, req.(*CooperativeCloseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASRPC_InitiateCloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateCloseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRPCServer).InitiateCloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASRPC/InitiateCloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRPCServer).InitiateCloseChannel(ctx, req.(*InitiateCloseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASRPC_FinalizeCloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeCloseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRPCServer).FinalizeCloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASRPC/FinalizeCloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRPCServer).FinalizeCloseChannel(ctx, req.(*FinalizeCloseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASRPC_TryToCheat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryToCheatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRPCServer).TryToCheat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASRPC/TryToCheat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRPCServer).TryToCheat(ctx, req.(*TryToCheatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ASRPC_ServiceDesc is the grpc.ServiceDesc for ASRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ASRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ASRPC",
	HandlerType: (*ASRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reset",
			Handler:    _ASRPC_Reset_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _ASRPC_GetInfo_Handler,
		},
		{
			MethodName: "OpenChannel",
			Handler:    _ASRPC_OpenChannel_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _ASRPC_Pay_Handler,
		},
		{
			MethodName: "CooperativeCloseChannel",
			Handler:    _ASRPC_CooperativeCloseChannel_Handler,
		},
		{
			MethodName: "InitiateCloseChannel",
			Handler:    _ASRPC_InitiateCloseChannel_Handler,
		},
		{
			MethodName: "FinalizeCloseChannel",
			Handler:    _ASRPC_FinalizeCloseChannel_Handler,
		},
		{
			MethodName: "TryToCheat",
			Handler:    _ASRPC_TryToCheat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asrpc.proto",
}
